namespace SysCredit.Api.Generators.ErrorCodes;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

using System.Collections.Generic;
using System.Linq;
using System.Text;

[Generator]
internal class ErrorCodeGenerator : ISourceGenerator
{
    private const string ClassName = "ErrorCodes";
    private IReadOnlyCollection<(string Class, string Prefix)> ErrorCodePrefixes = default!;

    public void Initialize(GeneratorInitializationContext Context)
    {
        Context.RegisterForSyntaxNotifications(() => new ErrorCodePrefixSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext Context)
    {
        var SyntaxContextReceiver = (ErrorCodePrefixSyntaxReceiver)Context.SyntaxContextReceiver!;
        ErrorCodePrefixes = SyntaxContextReceiver.ErrorCodePrefixes;

        SourceBuilder Source = SourceBuilder.Create();
        Source.DeclareAutoGenerated()
              .DeclareNamespace(Constants.SysCreditApiConstantsNamespaceName)
              .DeclareStaticUsing("ErrorCodePrefix")
              .DeclareStaticUsing("ErrorCodeNumber")
              .AddClass(ClassName).Public().Static()
                   .AddConstFieldFactory(ErrorCodePropertiesFactory);

        Context.AddSource(Helpers.FileName(ClassName), SourceText.From(Source.Build(), Encoding.UTF8));
    }

    private void ErrorCodePropertiesFactory(ClassBuilder Builder)
    {
        foreach (var (Class, Prefix) in ErrorCodePrefixes)
        {
            foreach (var CodeNumber in Enumerable.Range(Constants.MinCodeNumber, Constants.MaxCodeNumber))
            {
                Builder.AddConstField($"{Prefix}{CodeNumber,4:D4}").Public().Type("string")
                       .Value($"$\"{{{Class}Prefix}}{{ {Constants.Underscore}{CodeNumber,4:D4} }}\"");
            }
        }
    }

    private class ErrorCodePrefixSyntaxReceiver : ISyntaxContextReceiver
    {
        public List<(string Class, string Prefix)> ErrorCodePrefixes { get; } = new();

        public void OnVisitSyntaxNode(GeneratorSyntaxContext Context)
        {
            if (Context.Node is ClassDeclarationSyntax ClassDeclaration && ClassDeclaration.AttributeLists.Count > 0)
            {
                INamedTypeSymbol ClassSymbol = Context.SemanticModel.GetDeclaredSymbol(ClassDeclaration)!;
                INamedTypeSymbol AttributeSymbol = Context.SemanticModel.Compilation.GetErrorCodePrefixAttributeMetadata();

                AttributeData? Attribute = ClassSymbol.GetAttributeIfExists(AttributeSymbol);

                if (Attribute is not null)
                {
                    ErrorCodePrefixes.Add((ClassSymbol.Name, Attribute.ConstructorArguments[0].Value!.ToString()));
                }
            }
        }
    }
}
