namespace SysCredit.Api.Generators;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

using System.Collections.Generic;
using System.Linq;
using System.Text;

[Generator]
internal class ErrorCodeGenerator : ISourceGenerator
{
    private const string ClassName = "ErrorCodes";

    public void Initialize(GeneratorInitializationContext Context)
    {
        Context.RegisterForSyntaxNotifications(ErrorCodePrefixSyntaxContextReceiver.Create);
    }

    public void Execute(GeneratorExecutionContext Context)
    {
        var ContextReceiver = Context.SyntaxContextReceiver.As<ErrorCodePrefixSyntaxContextReceiver>()!;

        SourceBuilder Source = SourceBuilder.Create();
        Source.DeclareAutoGenerated()
              .DeclareNamespace(Constants.SysCreditApiConstantsNamespaceName)
              .DeclareStaticUsing("ErrorCodePrefix")
              .AddClass(ClassName).Public().Static().Partial()
                   .AddFieldFactory(ErrorCodePropertiesFactory, ContextReceiver.ErrorCodePrefixes);

        Context.AddSource(Helpers.FileName(ClassName), SourceText.From(Source.Build(), Encoding.UTF8));
    }

    private static void ErrorCodePropertiesFactory(ClassBuilder Builder, IReadOnlyCollection<string> ErrorCodePrefixes)
    {
        foreach (var Prefix in ErrorCodePrefixes)
        {
            foreach (var CodeNumber in Enumerable.Range(Constants.MinCodeNumber, Constants.MaxCodeNumber))
            {
                Builder.AddField($"{Prefix}{CodeNumber,4:D4}")
                       .Public().Const().OfType(Types.String)
                       .WithValue($"\"{Prefix}{CodeNumber,4:D4}\"");
            }
        }
    }

    private class ErrorCodePrefixSyntaxContextReceiver : ISyntaxContextReceiver
    {
        public static ErrorCodePrefixSyntaxContextReceiver Create() => new();

        public HashSet<string> ErrorCodePrefixes { get; } = new();

        public void OnVisitSyntaxNode(GeneratorSyntaxContext Context)
        {
            if (Context.Node is ClassDeclarationSyntax ClassDeclaration && ClassDeclaration.AttributeLists.Count > 0)
            {
                INamedTypeSymbol ClassSymbol = Context.SemanticModel.GetDeclaredSymbol(ClassDeclaration)!;
                INamedTypeSymbol AttributeSymbol = Context.SemanticModel.Compilation.GetErrorCodePrefixAttributeMetadata();

                AttributeData? ErrorCodePrefixAttribute = ClassSymbol.GetAttributeIfExists(AttributeSymbol);

                if (ErrorCodePrefixAttribute is not null)
                {
                    ErrorCodePrefixes.Add(ErrorCodePrefixAttribute.ConstructorArguments[0].Value!.ToString());
                }
            }
        }
    }
}
