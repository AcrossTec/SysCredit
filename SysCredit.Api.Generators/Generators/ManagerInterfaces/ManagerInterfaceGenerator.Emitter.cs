namespace SysCredit.Api.Generators;

using System.Collections.Immutable;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SysCredit.Toolkits.Generators.Extensions;

/// <inheritdoc />
public partial class ManagerInterfaceGenerator
{
    /// <summary>
    ///     Genera la interfaz de la clase de servicio marcado con el atributo ServiceAttribute.
    /// </summary>
    /// <param name="Context">
    ///     Context passed to an incremental generator when it has registered an output via <see cref="IncrementalGeneratorInitializationContext.RegisterSourceOutput{TSource}(IncrementalValueProvider{TSource}, Action{SourceProductionContext, TSource})"/>.
    /// </param>
    /// <param name="Manager">
    ///     Información de los métodos de cada servicio que se le va ha generar la interfaz.
    /// </param>
    private static void EmitSourceCode(SourceProductionContext Context, ManagerInfo Manager)
    {
        string SourceTemplate = $@"
//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Runtime Version: 1.0.0.0                                                 
//                                                                              
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

namespace {Constants.SysCreditApiInterfacesNamespaceName}.Managers
{{
    public partial interface {Manager.ManagerInterfaceInfo.InterfaceSymbol.Name}
    {{
        {string.Join($"{Constants.NewLine}{Constants.NewLine}{Constants.Tab}{Constants.Tab}", Manager.MethodInfo.FullyQualifiedNames.Select(MethodName => $"{MethodName};"))}
    }}
}}

namespace SysCredit.Api.Extensions
{{
    public static partial class {Manager.ManagerSymbol.Name.Replace("Manager", "Service")}Extensions
    {{
    {string.Join(
        $"{Constants.NewLine}{Constants.NewLine}{Constants.Tab}", Manager.MethodInfo.Symbols.Select(Method =>
        $"{Constants.Tab}[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]{Constants.NewLine}" +
        $"{Constants.Tab}{Constants.Tab}public static {Method.ReturnType.ToDisplayString(SymbolDisplayFormat.CSharpErrorMessageFormat)} {Method.GetFullyQualifiedName()}(this {Constants.SysCreditApiInterfacesNamespaceName}.IService<{Manager.ManagerModelInfo.ModelSymbol.GetFullyQualifiedMetadataName()}> Service{GetMethodParameters(Method, ",")}){Constants.NewLine}" +
        $"{Constants.Tab}{Constants.Tab}{{{Constants.NewLine}" +
        $"{Constants.Tab}{Constants.Tab}{Constants.Tab}return (({Constants.SysCreditApiInterfacesNamespaceName}.Managers.{Manager.ManagerInterfaceInfo.InterfaceSymbol.Name})Service).{Method.GetFullyQualifiedName()}({GetMethodParametersWithoutType(Method)});{Constants.NewLine}" +
        $"{Constants.Tab}{Constants.Tab}}}{Constants.NewLine}"))}
    }}
}}

namespace {Manager.ManagerSymbol.ContainingNamespace.ToDisplayString()}
{{
    public partial class {Manager.ManagerSymbol.Name} : {Constants.SysCreditApiInterfacesNamespaceName}.Managers.{Manager.ManagerInterfaceInfo.InterfaceSymbol.Name}
    {{
    }}
}}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        ";
        string CSharpSourceCode = SourceTemplate;
        Context.AddSource(Helpers.FileName($"{Constants.SysCreditApiInterfacesNamespaceName}.Managers.{Manager.ManagerSymbol.Name}"), SourceText.From(CSharpSourceCode, Encoding.UTF8));
    }

    /// <summary>
    ///     Obtiene en forma de cadena todos los parámetros de un método.
    /// </summary>
    /// <param name="Method">
    ///     Objeto con la información del Método.
    /// </param>
    /// <param name="Prefix">
    ///     Cadena que será usada como prefijo de la cadena de parámetros.
    /// </param>
    /// <returns>
    ///     Regresa una cadena con todos los argumentos separados por comas.
    /// </returns>
    private static string GetMethodParameters(IMethodSymbol Method, string? Prefix = null)
    {
        var Parameters = Method.Parameters.Select(Parameter => $"{Parameter.Type.ToDisplayString(SymbolDisplayFormat.CSharpErrorMessageFormat)} {Parameter.GetFullyQualifiedName()}").ToImmutableArray();
        if (Parameters.IsEmpty) return Constants.Empty;
        return $"{(Prefix is null ? Constants.Empty : $"{Prefix} ")}{string.Join(", ", Parameters)}";
    }

    /// <summary>
    ///     Obtiene en forma de cadena todos los parámetros de un método.
    /// </summary>
    /// <param name="Method">
    ///     Objeto con la información del Método.
    /// </param>
    /// <param name="Prefix">
    ///     Cadena que será usada como prefijo de la cadena de parámetros.
    /// </param>
    /// <returns>
    ///     Regresa una cadena con todos los argumentos separados por comas.
    /// </returns>
    private static string GetMethodParametersWithoutType(IMethodSymbol Method, string? Prefix = null)
    {
        var Parameters = Method.Parameters.Select(Parameter => Parameter.GetFullyQualifiedName()).ToImmutableArray();
        if (Parameters.IsEmpty) return Constants.Empty;
        return $"{(Prefix is null ? Constants.Empty : $"{Prefix} ")}{string.Join(", ", Parameters)}";
    }
}
