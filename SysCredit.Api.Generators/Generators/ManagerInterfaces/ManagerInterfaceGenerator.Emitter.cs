namespace SysCredit.Api.Generators;

using System.Collections.Immutable;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SysCredit.Toolkits.Generators.Extensions;

using static Constants;
using static String;

/// <inheritdoc />
public partial class ManagerInterfaceGenerator
{
    /// <summary>
    ///     Genera la interfaz de la clase de servicio marcado con el atributo ServiceAttribute.
    /// </summary>
    /// <param name="Context">
    ///     Context passed to an incremental generator when it has registered an output via <see cref="IncrementalGeneratorInitializationContext.RegisterSourceOutput{TSource}(IncrementalValueProvider{TSource}, Action{SourceProductionContext, TSource})"/>.
    /// </param>
    /// <param name="Manager">
    ///     Información de los métodos de cada servicio que se le va ha generar la interfaz.
    /// </param>
    private static void EmitSourceCode(SourceProductionContext Context, ManagerInfo Manager)
    {
        string ManagerTypeName = Manager.ManagerSymbol.Name;
        string ManagerInterfaceNamespace = $"{SysCreditApiInterfacesNamespaceName}.Managers";
        string ManagerInterfaceTypeName = Manager.ManagerInterfaceInfo.InterfaceSymbol.Name;
        string ManagerInterfaceFullName = $"{ManagerInterfaceNamespace}.{ManagerInterfaceTypeName}";

        string CSharpSourceCodeTemplate =
        $$"""
        //------------------------------------------------------------------------------
        // <auto-generated>                                                             
        //     This code was generated by a tool.                                       
        //     Runtime Version: 1.0.0.0                                                 
        //                                                                              
        //     Changes to this file may cause incorrect behavior and will be lost if    
        //     the code is regenerated.                                                 
        // </auto-generated>                                                            
        //------------------------------------------------------------------------------

        #nullable enable
        #pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

        namespace {{ManagerInterfaceNamespace}}
        {
            public partial interface {{ManagerInterfaceTypeName}} : {{SysCreditApiInterfacesNamespaceName}}.IManager<{{Manager.ManagerModelInfo.ModelSymbol.GetFullyQualifiedMetadataName()}}>
            {
                {{Join($"{NewLine}{NewLine}{Tab}{Tab}", Manager.MethodInfo.FullyQualifiedNames.Select(MethodName => $"{MethodName};"))}}
            }
        }

        namespace SysCredit.Api.Extensions
        {
            public static partial class {{Manager.ManagerSymbol.Name.Replace("Manager", "Service")}}Extensions
            {
        {{Join($"{NewLine}{NewLine}", Manager.MethodInfo.Symbols.Select(Method => 
                $$"""
                        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                        public static {{Method.ReturnType.GetCSharpErrorMessageFormatName()}} {{Method.GetFullyQualifiedName()}}(this {{SysCreditApiInterfacesNamespaceName}}.IService<{{Manager.ManagerModelInfo.ModelSymbol.GetFullyQualifiedMetadataName()}}> Service{{GetMethodParameters(Method, ",")}})
                        {
                            return (({{ManagerInterfaceFullName}})Service).{{Method.GetFullyQualifiedName()}}({{GetMethodParametersWithoutType(Method)}});
                        }
                """))}}
            }
        }

        namespace {{Manager.ManagerSymbol.ContainingNamespace.ToDisplayString()}}
        {
            public partial class {{ManagerTypeName}} : {{ManagerInterfaceFullName}}
            {
            }
        }

        #pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        """;

        Context.AddSource(Helpers.FileName($"{ManagerInterfaceNamespace}.{ManagerTypeName}"), SourceText.From(CSharpSourceCodeTemplate, Encoding.UTF8));
    }

    /// <summary>
    ///     Obtiene en forma de cadena todos los parámetros de un método.
    /// </summary>
    /// <param name="Method">
    ///     Objeto con la información del Método.
    /// </param>
    /// <param name="Prefix">
    ///     Cadena que será usada como prefijo de la cadena de parámetros.
    /// </param>
    /// <returns>
    ///     Regresa una cadena con todos los argumentos separados por comas.
    /// </returns>
    private static string GetMethodParameters(IMethodSymbol Method, string? Prefix = null)
    {
        var Parameters = Method.Parameters.Select(Parameter => $"{Parameter.Type.GetCSharpErrorMessageFormatName()} {Parameter.GetFullyQualifiedName()}").ToImmutableArray();
        return Parameters.IsEmpty ? Constants.Empty : $"{(Prefix is null ? Constants.Empty : $"{Prefix} ")}{Join(", ", Parameters)}";
    }

    /// <summary>
    ///     Obtiene en forma de cadena todos los parámetros de un método.
    /// </summary>
    /// <param name="Method">
    ///     Objeto con la información del Método.
    /// </param>
    /// <param name="Prefix">
    ///     Cadena que será usada como prefijo de la cadena de parámetros.
    /// </param>
    /// <returns>
    ///     Regresa una cadena con todos los argumentos separados por comas.
    /// </returns>
    private static string GetMethodParametersWithoutType(IMethodSymbol Method, string? Prefix = null)
    {
        var Parameters = Method.Parameters.Select(Parameter => Parameter.GetFullyQualifiedName()).ToImmutableArray();
        return Parameters.IsEmpty ? Constants.Empty : $"{(Prefix is null ? Constants.Empty : $"{Prefix} ")}{Join(", ", Parameters)}";
    }
}
