namespace SysCredit.Api.Generators;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using SysCredit.Toolkits.Generators.Extensions;

using System.Text;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

/// <inheritdoc />
public partial class InterfaceServiceGenerator
{
    /// <summary>
    ///     Genera la interfaz de la clase de servicio marcado con el atributo ServiceAttribute.
    /// </summary>
    /// <param name="Context">
    ///     Context passed to an incremental generator when it has registered an output via <see cref="IncrementalGeneratorInitializationContext.RegisterSourceOutput{TSource}(IncrementalValueProvider{TSource}, Action{SourceProductionContext, TSource})"/>.
    /// </param>
    /// <param name="Services">
    ///     Información de los métodos de cada servicio que se le va ha generar la interfaz.
    /// </param>
    private static void Emit(SourceProductionContext Context, InterfaceServiceInfo Service)
    {
        CompilationUnitSyntax CompilationUnit = SyntaxFactory.CompilationUnit()
            .WithMembers(
                List(new MemberDeclarationSyntax[]
                {
                    NamespaceDeclaration(IdentifierName("SysCredit.Api.Interfaces.Services"))
                        .WithNamespaceKeyword(
                            Token(
                                TriviaList(
                                    Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)),
                                    Comment("//------------------------------------------------------------------------------"),
                                    Comment("// <auto-generated>                                                             "),
                                    Comment("//     This code was generated by a tool.                                       "),
                                    Comment("//     Runtime Version: 1.0.0.0                                                 "),
                                    Comment("//                                                                              "),
                                    Comment("//     Changes to this file may cause incorrect behavior and will be lost if    "),
                                    Comment("//     the code is regenerated.                                                 "),
                                    Comment("// </auto-generated>                                                            "),
                                    Comment("//------------------------------------------------------------------------------")),
                                SyntaxKind.NamespaceKeyword,
                                TriviaList()))
                        .WithUsings(List(Service.Usings))
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(
                                InterfaceDeclaration(Service.InterfaceName)
                                    .WithModifiers(
                                        TokenList(
                                            Token(SyntaxKind.PublicKeyword),
                                            Token(SyntaxKind.PartialKeyword)))
                                    .WithBaseList(
                                        BaseList(SingletonSeparatedList<BaseTypeSyntax>(SimpleBaseType(
                                            GenericName(Identifier("IService"))
                                            .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(Service.ModelName))))))))
                                    .WithMembers(
                                        List<MemberDeclarationSyntax>(Service.MethodDeclarations)))),
                    NamespaceDeclaration(IdentifierName("SysCredit.Api.Services"))
                        .WithUsings(List(Service.Usings))
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(Service.ClassDeclaration))
                }))
            .NormalizeWhitespace();

        string CSharpText = CompilationUnit.GetText(Encoding.UTF8).ToString();
        Context.AddSource(Helpers.FileName($"SysCredit.Api.Interfaces.Services.{Service.InterfaceName}"), CompilationUnit);
    }
}
