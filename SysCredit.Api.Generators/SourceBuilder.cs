namespace SysCredit.Api.Generators;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using static System.String;

public class SourceBuilder
{
    private string? AutoGenerated = null;
    private string? Namespace = null;
    private readonly List<string> Usings = new();
    private readonly List<string> StaticUsings = new();
    private readonly List<ClassBuilder> Classes = new();

    public static SourceBuilder Create() => new();

    public SourceBuilder DeclareAutoGenerated()
    {
        this.AutoGenerated = Constants.AutoGenerated;
        return this;
    }

    public SourceBuilder DeclareNamespace(string Namespace)
    {
        this.Namespace = $"namespace {Namespace};\r\n";
        return this;
    }

    public SourceBuilder DeclareUsing(string Using)
    {
        Usings.Add($"using {Using};");
        return this;
    }

    public SourceBuilder DeclareStaticUsing(string Using)
    {
        StaticUsings.Add($"using static {Using};");
        return this;
    }

    public ClassBuilder AddClass(string Name)
    {
        var Builder = new ClassBuilder(Name);
        Classes.Add(Builder);
        return Builder;
    }

    public string Build()
    {
        StringBuilder Builder = new();

        if (AutoGenerated is not null)
        {
            Builder.AppendLine(AutoGenerated);
        }

        if (Namespace is not null)
        {
            Builder.AppendLine(Namespace);
        }

        Usings.Sort();
        Builder.AppendLine(Join("\r\n", Usings));

        Builder.AppendLine();

        StaticUsings.Sort();
        Builder.AppendLine(Join("\r\n", StaticUsings));

        Builder.AppendLine();

        Builder.AppendLine(Join("\r\n", Classes.Select(Class => Class.Build())));

        return Builder.ToString();
    }
}

public class ClassBuilder(string Name)
{
    private int TabCount = 0;
    private bool IsPublic, IsStatic, IsAbstract, IsSealed;
    private readonly List<ConstFieldBuilder> ConstFields = new();

    public ClassBuilder Public()
    {
        IsPublic = true;
        return this;
    }

    public ClassBuilder Internal()
    {
        IsPublic = false;
        return this;
    }

    public ClassBuilder Static()
    {
        IsStatic = true;
        IsAbstract = IsSealed = false;
        return this;
    }

    public ClassBuilder Abstract()
    {
        IsAbstract = true;
        IsStatic = IsSealed = false;
        return this;
    }

    public ClassBuilder Sealed()
    {
        IsSealed = true;
        IsStatic = IsAbstract = false;
        return this;
    }

    public ClassBuilder PrefixTabCount(int TabCount)
    {
        this.TabCount = TabCount;
        return this;
    }

    public ClassBuilder AddConstFieldFactory(Action<ClassBuilder> Factory)
    {
        Factory.Invoke(this);
        return this;
    }

    public ConstFieldBuilder AddConstField(string Name)
    {
        ConstFieldBuilder Builder = new(Name);
        ConstFields.Add(Builder);
        return Builder;
    }

    public string Build()
    {
        StringBuilder Builder = new();
        string Tabs = new(' ', TabCount * Constants.Tab.Length);

        Builder.Append(Tabs);
        Builder.Append($"{(IsPublic ? "public " : "internal ")}");
        Builder.Append($"{(IsStatic ? "static " : Empty)}");
        Builder.Append($"{(IsSealed ? "sealed" : Empty)}");
        Builder.Append($"{(IsAbstract ? "abstract" : Empty)}");
        Builder.Append($"partial class {Name}");
        Builder.AppendLine();
        Builder.AppendLine($"{Tabs}{{");
        Builder.AppendLine($"{Tabs}{Join("\r\n", ConstFields.Select(Field => $"{Constants.Tab}{Field.Build()}"))}");
        Builder.AppendLine($"{Tabs}}}");
        return Builder.ToString();
    }
}

public class ConstFieldBuilder(string FieldName)
{
    private bool IsPublic, IsPrivate, IsProtected, IsInternal;
    private string? FieldType, FieldValue;

    public ConstFieldBuilder Public()
    {
        IsPublic = true;
        IsPrivate = IsProtected = IsInternal = false;
        return this;
    }

    public ConstFieldBuilder Private()
    {
        IsPrivate = true;
        IsPublic = IsProtected = IsInternal = false;
        return this;
    }

    public ConstFieldBuilder Protected()
    {
        IsProtected = true;
        IsPublic = IsPrivate = IsInternal = false;
        return this;
    }

    public ConstFieldBuilder Internal()
    {
        IsInternal = true;
        IsPublic = IsPrivate = IsProtected = false;
        return this;
    }

    public ConstFieldBuilder Type(string Type)
    {
        this.FieldType = Type;
        return this;
    }

    public ConstFieldBuilder Value(string Value)
    {
        this.FieldValue = Value;
        return this;
    }

    public string Build()
    {
        StringBuilder Builder = new();

        Builder.Append(IsPublic ? "public" : IsPrivate ? "private" : IsProtected ? "protected" : IsInternal ? "internal" : Empty);
        Builder.AppendFormat(" const {0} {1} = {2};", FieldType, FieldName, FieldValue);

        return Builder.ToString();
    }
}
